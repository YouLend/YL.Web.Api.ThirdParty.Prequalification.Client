/* 
 * YouLend Third Party Pre Qualification API
 *
 * Through this API you can can check if a merchant pre qualifies for a Youlend loan
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Prequalification.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Prequalification.Client.Model
{
    /// <summary>
    /// FinancialDataModel
    /// </summary>
    [DataContract]
    public partial class FinancialDataModel :  IEquatable<FinancialDataModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialDataModel" /> class.
        /// </summary>
        /// <param name="monthlyCardRevenue">monthlyCardRevenue.</param>
        /// <param name="paymentData">paymentData.</param>
        /// <param name="monthlyValueOfPurchaseTransactions">monthlyValueOfPurchaseTransactions.</param>
        /// <param name="purchaseData">purchaseData.</param>
        /// <param name="monthlyRevenueFromInvoices">monthlyRevenueFromInvoices.</param>
        /// <param name="invoiceData">invoiceData.</param>
        public FinancialDataModel(double monthlyCardRevenue = default(double), List<PaymentDataRowModel> paymentData = default(List<PaymentDataRowModel>), double monthlyValueOfPurchaseTransactions = default(double), List<PurchaseDataRowModel> purchaseData = default(List<PurchaseDataRowModel>), double monthlyRevenueFromInvoices = default(double), List<InvoiceDataRowModel> invoiceData = default(List<InvoiceDataRowModel>))
        {
            this.MonthlyCardRevenue = monthlyCardRevenue;
            this.PaymentData = paymentData;
            this.MonthlyValueOfPurchaseTransactions = monthlyValueOfPurchaseTransactions;
            this.PurchaseData = purchaseData;
            this.MonthlyRevenueFromInvoices = monthlyRevenueFromInvoices;
            this.InvoiceData = invoiceData;
        }
        
        /// <summary>
        /// Gets or Sets MonthlyCardRevenue
        /// </summary>
        [DataMember(Name="monthlyCardRevenue", EmitDefaultValue=false)]
        public double MonthlyCardRevenue { get; set; }

        /// <summary>
        /// Gets or Sets PaymentData
        /// </summary>
        [DataMember(Name="paymentData", EmitDefaultValue=false)]
        public List<PaymentDataRowModel> PaymentData { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyValueOfPurchaseTransactions
        /// </summary>
        [DataMember(Name="monthlyValueOfPurchaseTransactions", EmitDefaultValue=false)]
        public double MonthlyValueOfPurchaseTransactions { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseData
        /// </summary>
        [DataMember(Name="purchaseData", EmitDefaultValue=false)]
        public List<PurchaseDataRowModel> PurchaseData { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyRevenueFromInvoices
        /// </summary>
        [DataMember(Name="monthlyRevenueFromInvoices", EmitDefaultValue=false)]
        public double MonthlyRevenueFromInvoices { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceData
        /// </summary>
        [DataMember(Name="invoiceData", EmitDefaultValue=false)]
        public List<InvoiceDataRowModel> InvoiceData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialDataModel {\n");
            sb.Append("  MonthlyCardRevenue: ").Append(MonthlyCardRevenue).Append("\n");
            sb.Append("  PaymentData: ").Append(PaymentData).Append("\n");
            sb.Append("  MonthlyValueOfPurchaseTransactions: ").Append(MonthlyValueOfPurchaseTransactions).Append("\n");
            sb.Append("  PurchaseData: ").Append(PurchaseData).Append("\n");
            sb.Append("  MonthlyRevenueFromInvoices: ").Append(MonthlyRevenueFromInvoices).Append("\n");
            sb.Append("  InvoiceData: ").Append(InvoiceData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialDataModel);
        }

        /// <summary>
        /// Returns true if FinancialDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialDataModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MonthlyCardRevenue == input.MonthlyCardRevenue ||
                    this.MonthlyCardRevenue.Equals(input.MonthlyCardRevenue)
                ) && 
                (
                    this.PaymentData == input.PaymentData ||
                    this.PaymentData != null &&
                    input.PaymentData != null &&
                    this.PaymentData.SequenceEqual(input.PaymentData)
                ) && 
                (
                    this.MonthlyValueOfPurchaseTransactions == input.MonthlyValueOfPurchaseTransactions ||
                    this.MonthlyValueOfPurchaseTransactions.Equals(input.MonthlyValueOfPurchaseTransactions)
                ) && 
                (
                    this.PurchaseData == input.PurchaseData ||
                    this.PurchaseData != null &&
                    input.PurchaseData != null &&
                    this.PurchaseData.SequenceEqual(input.PurchaseData)
                ) && 
                (
                    this.MonthlyRevenueFromInvoices == input.MonthlyRevenueFromInvoices ||
                    this.MonthlyRevenueFromInvoices.Equals(input.MonthlyRevenueFromInvoices)
                ) && 
                (
                    this.InvoiceData == input.InvoiceData ||
                    this.InvoiceData != null &&
                    input.InvoiceData != null &&
                    this.InvoiceData.SequenceEqual(input.InvoiceData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MonthlyCardRevenue.GetHashCode();
                if (this.PaymentData != null)
                    hashCode = hashCode * 59 + this.PaymentData.GetHashCode();
                hashCode = hashCode * 59 + this.MonthlyValueOfPurchaseTransactions.GetHashCode();
                if (this.PurchaseData != null)
                    hashCode = hashCode * 59 + this.PurchaseData.GetHashCode();
                hashCode = hashCode * 59 + this.MonthlyRevenueFromInvoices.GetHashCode();
                if (this.InvoiceData != null)
                    hashCode = hashCode * 59 + this.InvoiceData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
