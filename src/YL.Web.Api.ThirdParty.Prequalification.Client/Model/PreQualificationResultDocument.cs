/* 
 * YouLend Third Party Pre Qualification API
 *
 * Through this API you can can check if a merchant pre qualifies for a Youlend loan
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Prequalification.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Prequalification.Client.Model
{
    /// <summary>
    /// PreQualificationResultDocument
    /// </summary>
    [DataContract]
    public partial class PreQualificationResultDocument :  IEquatable<PreQualificationResultDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreQualificationResultDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PreQualificationResultDocument()
        {
        }
        
        /// <summary>
        /// Gets or Sets ThirdPartyMerchantId
        /// </summary>
        [DataMember(Name="thirdPartyMerchantId", EmitDefaultValue=false)]
        public string ThirdPartyMerchantId { get; private set; }

        /// <summary>
        /// Gets or Sets Mid
        /// </summary>
        [DataMember(Name="mid", EmitDefaultValue=false)]
        public string Mid { get; private set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; private set; }

        /// <summary>
        /// Gets or Sets OverallCreditRiskScore
        /// </summary>
        [DataMember(Name="overallCreditRiskScore", EmitDefaultValue=false)]
        public double OverallCreditRiskScore { get; private set; }

        /// <summary>
        /// Gets or Sets OverrideCreditRiskScore
        /// </summary>
        [DataMember(Name="overrideCreditRiskScore", EmitDefaultValue=false)]
        public double OverrideCreditRiskScore { get; private set; }

        /// <summary>
        /// Gets or Sets LoanOptions
        /// </summary>
        [DataMember(Name="loanOptions", EmitDefaultValue=false)]
        public List<LoanOptionDocument> LoanOptions { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreQualificationResultDocument {\n");
            sb.Append("  ThirdPartyMerchantId: ").Append(ThirdPartyMerchantId).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  OverallCreditRiskScore: ").Append(OverallCreditRiskScore).Append("\n");
            sb.Append("  OverrideCreditRiskScore: ").Append(OverrideCreditRiskScore).Append("\n");
            sb.Append("  LoanOptions: ").Append(LoanOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreQualificationResultDocument);
        }

        /// <summary>
        /// Returns true if PreQualificationResultDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of PreQualificationResultDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreQualificationResultDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ThirdPartyMerchantId == input.ThirdPartyMerchantId ||
                    (this.ThirdPartyMerchantId != null &&
                    this.ThirdPartyMerchantId.Equals(input.ThirdPartyMerchantId))
                ) && 
                (
                    this.Mid == input.Mid ||
                    (this.Mid != null &&
                    this.Mid.Equals(input.Mid))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.OverallCreditRiskScore == input.OverallCreditRiskScore ||
                    this.OverallCreditRiskScore.Equals(input.OverallCreditRiskScore)
                ) && 
                (
                    this.OverrideCreditRiskScore == input.OverrideCreditRiskScore ||
                    this.OverrideCreditRiskScore.Equals(input.OverrideCreditRiskScore)
                ) && 
                (
                    this.LoanOptions == input.LoanOptions ||
                    this.LoanOptions != null &&
                    input.LoanOptions != null &&
                    this.LoanOptions.SequenceEqual(input.LoanOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ThirdPartyMerchantId != null)
                    hashCode = hashCode * 59 + this.ThirdPartyMerchantId.GetHashCode();
                if (this.Mid != null)
                    hashCode = hashCode * 59 + this.Mid.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                hashCode = hashCode * 59 + this.OverallCreditRiskScore.GetHashCode();
                hashCode = hashCode * 59 + this.OverrideCreditRiskScore.GetHashCode();
                if (this.LoanOptions != null)
                    hashCode = hashCode * 59 + this.LoanOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
