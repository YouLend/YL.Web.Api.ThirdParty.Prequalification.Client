/* 
 * YouLend Third Party Pre Qualification API
 *
 * Through this API you can can check if a merchant pre qualifies for a Youlend loan
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Prequalification.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Prequalification.Client.Model
{
    /// <summary>
    /// LoanOptionDocument
    /// </summary>
    [DataContract]
    public partial class LoanOptionDocument :  IEquatable<LoanOptionDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanOptionDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public LoanOptionDocument()
        {
        }
        
        /// <summary>
        /// Gets or Sets FundedAmount
        /// </summary>
        [DataMember(Name="fundedAmount", EmitDefaultValue=false)]
        public double FundedAmount { get; private set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public double Fee { get; private set; }

        /// <summary>
        /// Gets or Sets LoanAmount
        /// </summary>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double LoanAmount { get; private set; }

        /// <summary>
        /// Gets or Sets Sweep
        /// </summary>
        [DataMember(Name="sweep", EmitDefaultValue=false)]
        public double Sweep { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencyISOCode
        /// </summary>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanOptionDocument {\n");
            sb.Append("  FundedAmount: ").Append(FundedAmount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  Sweep: ").Append(Sweep).Append("\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanOptionDocument);
        }

        /// <summary>
        /// Returns true if LoanOptionDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanOptionDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanOptionDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FundedAmount == input.FundedAmount ||
                    this.FundedAmount.Equals(input.FundedAmount)
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    this.LoanAmount.Equals(input.LoanAmount)
                ) && 
                (
                    this.Sweep == input.Sweep ||
                    this.Sweep.Equals(input.Sweep)
                ) && 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.FundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Fee.GetHashCode();
                hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                hashCode = hashCode * 59 + this.Sweep.GetHashCode();
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
