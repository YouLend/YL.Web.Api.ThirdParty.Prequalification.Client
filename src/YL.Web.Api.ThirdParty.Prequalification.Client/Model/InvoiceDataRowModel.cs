/* 
 * YouLend Third Party Pre Qualification API
 *
 * Through this API you can can check if a merchant pre qualifies for a Youlend loan
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Prequalification.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Prequalification.Client.Model
{
    /// <summary>
    /// InvoiceDataRowModel
    /// </summary>
    [DataContract]
    public partial class InvoiceDataRowModel :  IEquatable<InvoiceDataRowModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDataRowModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceDataRowModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDataRowModel" /> class.
        /// </summary>
        /// <param name="invoiceDate">invoiceDate (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="currencyISOCode">currencyISOCode (required).</param>
        /// <param name="daysDurationOfInvoice">daysDurationOfInvoice (required).</param>
        /// <param name="category">category.</param>
        public InvoiceDataRowModel(DateTime invoiceDate = default(DateTime), double amount = default(double), string currencyISOCode = default(string), int daysDurationOfInvoice = default(int), string category = default(string))
        {
            // to ensure "invoiceDate" is required (not null)
            if (invoiceDate == null)
            {
                throw new InvalidDataException("invoiceDate is a required property for InvoiceDataRowModel and cannot be null");
            }
            else
            {
                this.InvoiceDate = invoiceDate;
            }

            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for InvoiceDataRowModel and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }

            // to ensure "currencyISOCode" is required (not null)
            if (currencyISOCode == null)
            {
                throw new InvalidDataException("currencyISOCode is a required property for InvoiceDataRowModel and cannot be null");
            }
            else
            {
                this.CurrencyISOCode = currencyISOCode;
            }

            // to ensure "daysDurationOfInvoice" is required (not null)
            if (daysDurationOfInvoice == null)
            {
                throw new InvalidDataException("daysDurationOfInvoice is a required property for InvoiceDataRowModel and cannot be null");
            }
            else
            {
                this.DaysDurationOfInvoice = daysDurationOfInvoice;
            }

            this.Category = category;
        }
        
        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="invoiceDate", EmitDefaultValue=false)]
        public DateTime InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyISOCode
        /// </summary>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or Sets DaysDurationOfInvoice
        /// </summary>
        [DataMember(Name="daysDurationOfInvoice", EmitDefaultValue=false)]
        public int DaysDurationOfInvoice { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceDataRowModel {\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("  DaysDurationOfInvoice: ").Append(DaysDurationOfInvoice).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceDataRowModel);
        }

        /// <summary>
        /// Returns true if InvoiceDataRowModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceDataRowModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceDataRowModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                ) && 
                (
                    this.DaysDurationOfInvoice == input.DaysDurationOfInvoice ||
                    this.DaysDurationOfInvoice.Equals(input.DaysDurationOfInvoice)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                hashCode = hashCode * 59 + this.DaysDurationOfInvoice.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Amount (double) minimum
            if(this.Amount < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new [] { "Amount" });
            }

            // CurrencyISOCode (string) maxLength
            if(this.CurrencyISOCode != null && this.CurrencyISOCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyISOCode, length must be less than 3.", new [] { "CurrencyISOCode" });
            }

            // CurrencyISOCode (string) minLength
            if(this.CurrencyISOCode != null && this.CurrencyISOCode.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyISOCode, length must be greater than 3.", new [] { "CurrencyISOCode" });
            }

            // DaysDurationOfInvoice (int) minimum
            if(this.DaysDurationOfInvoice < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DaysDurationOfInvoice, must be a value greater than or equal to 0.", new [] { "DaysDurationOfInvoice" });
            }

            // Category (string) maxLength
            if(this.Category != null && this.Category.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Category, length must be less than 255.", new [] { "Category" });
            }

            // Category (string) minLength
            if(this.Category != null && this.Category.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Category, length must be greater than 0.", new [] { "Category" });
            }

            yield break;
        }
    }

}
